import React, { useState, useEffect } from "react";
import { Game, GamePlayer } from "@/entities/all";
import { User } from "@/entities/User";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Plus, Users, Clock, Play, Loader2 } from "lucide-react";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import CreateGameDialog from "../components/game/CreateGameDialog";
import GameCard from "../components/game/GameCard";

export default function GameLobby() {
  const [games, setGames] = useState([]);
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showCreateDialog, setShowCreateDialog] = useState(false);
  const navigate = useNavigate();

  useEffect(() => {
    loadUser();
    loadGames();
    const interval = setInterval(loadGames, 3000);
    return () => clearInterval(interval);
  }, []);

  const loadUser = async () => {
    try {
      const userData = await User.me();
      setUser(userData);
    } catch (error) {
      console.error("Error loading user:", error);
    }
  };

  const loadGames = async () => {
    const allGames = await Game.list("-created_date", 50);
    const activeGames = allGames.filter(g => g.status !== "finished");
    
    const gamesWithPlayers = await Promise.all(
      activeGames.map(async (game) => {
        const players = await GamePlayer.filter({ game_id: game.id });
        return { ...game, players };
      })
    );
    
    setGames(gamesWithPlayers);
    setLoading(false);
  };

  const createGame = async (gameName) => {
    const game = await Game.create({
      name: gameName,
      status: "waiting",
      max_players: 2,
      current_turn: user.email,
      round_number: 1
    });

    await GamePlayer.create({
      game_id: game.id,
      player_email: user.email,
      player_name: user.full_name,
      health: 100,
      position: 1
    });

    navigate(createPageUrl(`GameRoom?id=${game.id}`));
  };

  const joinGame = async (game) => {
    await GamePlayer.create({
      game_id: game.id,
      player_email: user.email,
      player_name: user.full_name,
      health: 100,
      position: game.players.length + 1
    });

    if (game.players.length + 1 === game.max_players) {
      await Game.update(game.id, { 
        status: "in_progress",
        current_turn: game.created_by
      });
    }

    navigate(createPageUrl(`GameRoom?id=${game.id}`));
  };

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loader2 className="w-8 h-8 animate-spin text-cyan-400" />
      </div>
    );
  }

  const waitingGames = games.filter(g => g.status === "waiting");
  const activeGames = games.filter(g => g.status === "in_progress");

  return (
    <div className="min-h-screen p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-8 gap-4">
          <div>
            <h1 className="text-4xl font-bold text-white mb-2 bg-gradient-to-r from-cyan-400 to-pink-500 bg-clip-text text-transparent">
              Game Lobby
            </h1>
            <p className="text-gray-400">Join a match or create your own arena</p>
          </div>
          <Button 
            onClick={() => setShowCreateDialog(true)}
            className="bg-gradient-to-r from-cyan-500 to-pink-500 hover:from-cyan-600 hover:to-pink-600 text-white px-6 py-6 text-lg font-bold shadow-lg shadow-cyan-500/50"
          >
            <Plus className="w-5 h-5 mr-2" />
            Create Match
          </Button>
        </div>

        <div className="grid md:grid-cols-2 gap-6 mb-8">
          <Card className="bg-[#1a1f3a] border-cyan-500/30 shadow-lg shadow-cyan-500/10">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-white">
                <Clock className="w-5 h-5 text-cyan-400" />
                Waiting for Players
              </CardTitle>
            </CardHeader>
            <CardContent>
              {waitingGames.length === 0 ? (
                <p className="text-gray-400 text-center py-8">No games waiting. Create one!</p>
              ) : (
                <div className="space-y-3">
                  {waitingGames.map(game => (
                    <GameCard 
                      key={game.id}
                      game={game}
                      user={user}
                      onJoin={joinGame}
                    />
                  ))}
                </div>
              )}
            </CardContent>
          </Card>

          <Card className="bg-[#1a1f3a] border-pink-500/30 shadow-lg shadow-pink-500/10">
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-white">
                <Play className="w-5 h-5 text-pink-500" />
                Active Matches
              </CardTitle>
            </CardHeader>
            <CardContent>
              {activeGames.length === 0 ? (
                <p className="text-gray-400 text-center py-8">No active games right now</p>
              ) : (
                <div className="space-y-3">
                  {activeGames.map(game => (
                    <GameCard 
                      key={game.id}
                      game={game}
                      user={user}
                      onJoin={joinGame}
                    />
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>

      <CreateGameDialog
        open={showCreateDialog}
        onClose={() => setShowCreateDialog(false)}
        onSubmit={createGame}
      />
    </div>
  );
}
